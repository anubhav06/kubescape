package patch

import (
	"context"
	"errors"
	"fmt"
	"path/filepath"
	"time"

	"github.com/kubescape/kubescape/v2/core/cautils"
	"github.com/kubescape/kubescape/v2/core/meta"
	metav1 "github.com/kubescape/kubescape/v2/core/meta/datastructures/v1"
	"k8s.io/client-go/util/homedir"

	"github.com/spf13/cobra"
)

var patchCmdExamples = fmt.Sprintf(`
  Patch command is for patching (fixing) image vulnerabilities based on the image vulnerability report generated by Kubescape.
  It can patch only those images running in your Kubernetes cluster.
	
  # Patch container images based on the image vulnerability report generated by Kubescape
  1) %[1]s scan
  2) sudo buildkitd & sudo %[1]s patch --image <image-name> --kubeconfig <kubeconfig-file-path>

  The patch command can also be run without sudo privileges. For more details, please refer to the documentation: https://github.com/kubescape/kubescape/tree/master/cmd/patch

`, cautils.ExecName())

func GetPatchCmd(ks meta.IKubescape) *cobra.Command {
	var patchInfo metav1.PatchInfo

	patchCmd := &cobra.Command{
		Use:     "patch --image <image-tag> [flags]",
		Short:   "Patch container images running in your current cluster ",
		Long:    ``,
		Example: patchCmdExamples,
		RunE: func(cmd *cobra.Command, args []string) error {

			if patchInfo.ImageTag == "" {
				return errors.New("image tag is required")
			}

			return ks.Patch(context.TODO(), &patchInfo)
		},
	}

	patchCmd.PersistentFlags().StringVarP(&patchInfo.ImageTag, "image", "i", "", "Application image name and tag to patch")
	patchCmd.PersistentFlags().StringVarP(&patchInfo.PatchedImageTag, "tag", "t", "", "Tag for the patched image")
	patchCmd.PersistentFlags().StringVarP(&patchInfo.BuildkitAddress, "address", "a", "unix:///run/buildkit/buildkitd.sock", "Address of buildkitd service, defaults to local buildkitd.sock")
	patchCmd.PersistentFlags().DurationVar(&patchInfo.Timeout, "timeout", 5*time.Minute, "Timeout for the operation, defaults to '5m'")

	patchCmd.PersistentFlags().StringVarP(&patchInfo.Kubeconfig, "kubeconfig", "k", filepath.Join(homedir.HomeDir(), ".kube", "config"), "Path to kubeconfig file with.")

	return patchCmd
}
